<!DOCTYPE html>
<html>
	<head>
	  <title>StoreAndCoApp</title>
	  <%= stylesheet_link_tag    'application', media: 'all', 'data-turbolinks-track' => true %>
	  <%= javascript_include_tag 'application', 'data-turbolinks-track' => true %>
	  <%= csrf_meta_tags %>
		<%= javascript_include_tag "react" %>
		<%= javascript_include_tag "react-dom" %>
		<script src="https://npmcdn.com/react-router/umd/ReactRouter.min.js"></script>
		<script src="https://cdnjs.cloudflare.com/ajax/libs/babel-core/5.8.23/browser.min.js"></script>
		<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css" integrity="sha384-1q8mTJOASx8j1Au+a5WDVnPi2lkFfwwEAa8hDDdjZlpLegxhjVME1fgjWPGmkzs7" crossorigin="anonymous">
		<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap-theme.min.css" integrity="sha384-fLW2N01lMqjakBkx3l/M9EahuwpSfeNvV63J5ezn3uZzapT0u7EYsXMjQV+0En5r" crossorigin="anonymous">
		<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js" integrity="sha384-0mSbJDEHialfmuBBQP6A4Qrprq5OVfW37PRR3j5ELqxss1yVqOtnepnHVP9aJ7xS" crossorigin="anonymous"></script>
	</head>
	<body>

		<div id="mount"></div>

		<script type="text/babel">
			
		//begin Stock components
			const Stocks = React.createClass({
				getInitialState () {
					return { stockItems: [] };
				},

				componentDidMount () {
			    this.getStocks = $.get('/stocks/index', function (result) {
					this.setState({
						stockItems: result
					});
			    }.bind(this));
			  },

			  componentWillUnmount () {
			    this.getStocks.abort();
			  },

			  handleStockSubmit (stock) {
			  	var self = this;
			  	$.ajax({
					  type: "POST",
					  url: '/stocks/create',
					  data: stock,
					  success: function(result) {
					  	self.setState({
					  		stockItems: self.state.stockItems.concat(result)
					  	})
					  }
					});
			  },

				render() {
					let stockItems = this.state.stockItems.map(stockItem => <StockItem key={stockItem.id} {...stockItem}/>);
					return (
					  <div className="container">
		          <div className="row">
		            <h1>Inventory List</h1>
		            <h4>Note: Inventory quantities do not take into account items which are in a customer&#39;s cart but not yet purchased.</h4>
		          </div>
		          <div className="row">
		            <div className="list-group">
		              {stockItems}
		            </div>
		          </div>

		          <div className="container">
		        	  <div className="row">
		              <h2>New Stock</h2>
		            </div>
		            <div className="row">
		              <NewStock onStockSubmit={this.handleStockSubmit}/>
		            </div>
		        	</div>
		      	</div>
					);
				}
			})

			const NewStock = React.createClass({
			  getInitialState () {
			  	return {name: '', price:'', quantity:'', error:false};
				},

				handleSubmit (e) {
					e.preventDefault();

					if(!this.state.name || !this.state.price || !this.state.quantity || isNaN(this.state.price) || isNaN(this.state.quantity)){
						this.setState({error:true});
					} else {
			  		this.props.onStockSubmit({
								name: this.state.name,
								price: this.state.price,
								quantity: this.state.quantity
						});

						this.setState({name: '', price:'', quantity:'', error:false});
					}
				},

			  handleChange (name, e) {
			    var change = {};
			    change[name] = e.target.value;
			    this.setState(change);
				},

			  render () {
			    return (
			      <div>
			        <form onSubmit={this.handleSubmit}>
			          <label >Product Name</label><br />
			          <input className="form-control" value= {this.state.name} onChange={this.handleChange.bind(this, 'name')} />
			          <label >Price</label><br />
			          <input className="form-control" value= {this.state.price} onChange={this.handleChange.bind(this, 'price')} />
			          <label >Quantity</label><br />
			          <input className="form-control" value= {this.state.quantity} onChange={this.handleChange.bind(this, 'quantity')} />
			          <button className="btn">Add New Stock</button>
			      	</form>

			      	<Error containsError={this.state.error}/>
			      </div>
			    );
			  }
			})

			const StockItem = React.createClass({
		    render () {
		      return <a href="#" className="list-group-item"><b>Name</b>: {this.props.name} | <b>Price</b>: {this.props.price} | <b>Quantity</b>: {this.props.quantity}</a>;
		    }
			})

			const Error = React.createClass({
				render () {
					var classes = this.props.containsError === true ? "alert alert-danger" : "alert alert-danger hide";

					return(
						<div className={classes} role="alert">
						  <span className="glyphicon glyphicon-exclamation-sign" aria-hidden="true"></span>
						  <span className="sr-only">Error:</span>
						  Please confirm that your stock values are all present and correct format.
						</div>
					);
				}
			})

		// end Stock components

		//begin Product components 
		const Products = React.createClass({
				getInitialState () {
					return { stockItems: [], lineItems: [] };
				},

				componentDidMount () {
					//because products is also hitting /stocks/index, this could be arranged to not have to make this call since stockItems componenet also calls this...
			    this.getStocks = $.get('/stocks/index', function (result) {
					this.setState({
						stockItems: result
					});
			    }.bind(this));
			  },

			  componentWillUnmount () {
			    this.getStocks.abort();
			  },

			  addToCart (lineItem) {
			  	var self = this;
			  	$.each(self.state.stockItems, function(index, item) {
		  			if(item.id === lineItem.id){
		  				self.state.stockItems[index].quantity -= 1;
		  				return;
		  			}
		  		});

		  		//Look to see if I can utilize react's key to find if this lineItem exists?
		  		var containsListItem = false;

		  		$.each(self.state.lineItems, function(index, item) {
		  			if(item.id === lineItem.id){
		  				containsListItem = true;
		  				self.state.lineItems[index].quantity += 1;
		  				return;
		  			}
		  		});

		  		if(containsListItem){
		  			self.forceUpdate();
		  		} else {
		  			lineItem.quantity = 1;
		  			self.setState({
			  			lineItems: self.state.lineItems.concat(lineItem)
			  		});
		  		}
			  },

			  deleteFromCart (lineItemId, quantity) {
			  	var self = this; 

			  	var newLineItems = self.state.lineItems.filter(function (item) {
			  		return item.id != lineItemId;
			  	});

			  	$.each(self.state.stockItems, function(index, item) {
			  		if(item.id === lineItemId){
			  			self.state.stockItems[index].quantity += quantity;
			  		}
			  	});

					self.setState({
						lineItems: newLineItems
					});
			  },

				render () {
					let products = this.state.stockItems.map(stockItem => <Product sendToCart={this.addToCart} key={stockItem.id} {...stockItem}/>);
					return (
					  <div className="container">
		          <div className="row">
		            <h1>Products</h1>
		          </div>
		          <div className="row">
		            <div className="list-group">
		              {products}
		            </div>
		          </div>

		          <Cart deleteFromCart={this.deleteFromCart} lineItems={this.state.lineItems} />

		      	</div>
					);
				}
			})

			const Product = React.createClass({
				sendToCart (e) {
					e.preventDefault();
					this.props.sendToCart({id:this.props.id, name:this.props.name, price:this.props.price});
				},

		    render () {
		    	var button;
		    	if (this.props.quantity > 0) {
		    		button = <button className="btn" onClick={this.sendToCart}>Add To Cart</button>; 
		    	} else {
		    		button = <button className="btn disabled">Sold Out</button> ;
		    	}

		      return <a className="list-group-item"><b>Name</b>: {this.props.name} | <b>Price</b>: {this.props.price} {button}</a>;
		    }
			})

			//end Product components

			//begin Cart components

			const Cart = React.createClass({
				deleteFromCart (lineItemId, quantity) {
		  		this.props.deleteFromCart(lineItemId, quantity);
				},

				purchase (e) {
					e.preventDefault();
					console.log("purchasing!");
				}, 

				render () {
		      let lineItems = this.props.lineItems.map(lineItem => <LineItem deleteFromCart={this.deleteFromCart} key={lineItem.id} {...lineItem} />);
		      return (
		        <div className="container">
		          <div className="row">
		            <div className="col-md-9">
		              <h1>Your Shopping Basket</h1>
		              <ul className="list-group">
		                {lineItems}
		              </ul>
		              <button className="btn" onClick={this.purchase}>Purchase</button>
		            </div>
		          </div>
		        </div>  
		      );
		    }
			})

		  const LineItem = React.createClass({
		  	deleteFromCart(e){
		  		e.preventDefault();
		  		this.props.deleteFromCart(this.props.id, this.props.quantity);
		  	},

		    render () {
		      return (
		        <div>  
		          <li className="list-group-item">
		            <span className="badge">{this.props.quantity}</span>
		            {this.props.name}
		            <button className="btn" onClick={this.deleteFromCart}>Delete From Cart</button>
		          </li>
		        </div>
		      );
		    }
		  })

		  //end Cart components

		  //begin Main components

			const Main = React.createClass({
			  render() {
			    return (
			      <div>
							<nav className="navbar navbar-default">
							  <div className="container-fluid">
							    
							    <div className="navbar-header">
							      <a className="navbar-brand" href="#">Shop & Co.</a>
							    </div>

							    <div className="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
							      <ul className="nav navbar-nav navbar-right">
							        <li><Link to="/shop">Shop</Link></li>
							        <li><Link to="/inventory">Inventory</Link></li>
							      </ul>
							    </div>
							  </div>
							</nav>

			        {this.props.children}
			      </div>
			    )
			  }
			})

			//end Main components

			var Router = window.ReactRouter.Router;
			var Route = window.ReactRouter.Route;
			var Link = window.ReactRouter.Link;
			var browserHistory = window.ReactRouter.browserHistory;

			ReactDOM.render((
			  <div>
				  <Router history={browserHistory}>
				    <Route path="/" component={Main}>
				      <Route path="shop" component={Products} />
				      <Route path="inventory" component={Stocks} />
				    </Route>
				  </Router>
			  </div>
			), document.getElementById('mount'))
		</script>

		<%= yield %>

	</body>
</html>




